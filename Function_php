Function PHP
-------------------------------------------------------------------------------------------------


PHP_EOL - константа перехода на новую строку
-------------------------------------------------------------------------------------------------



Условные конструкции if
-------------------------------------------------------------------------------------------------

$v = 1;

$r = (1 == $v) ? 'Yes' : 'No'; // $r is set to 'Yes'
$r = (3 == $v) ? 'Yes' : 'No'; // $r is set to 'No'

echo (1 == $v) ? 'Yes' : 'No'; // 'Yes' will be printed

Аналог конструкции if

$v = 1;

if (1 == $v){
    echo 'Yes';
}
else{
    echo 'No';
}


Функции языка

uniqid — Генерирует уникальный ID
-------------------------------------------------------------------------------------------------

md5(uniqid) - это пример с генерацией в обертке MD5

-------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------

intval — Возвращает целое значение переменной
-------------------------------------------------------------------------------------------------
echo intval(4.2);                     // 4
echo intval('42');                    // 42
echo intval('+42');                   // 42
echo intval('-42');                   // -42
echo intval(042);                     // 34
-------------------------------------------------------------------------------------------------


file_put_contents('filename', data, flags) — Пишет строку в файл
-------------------------------------------------------------------------------------------------

file_exists — Проверяет наличие указанного файла или каталога
-------------------------------------------------------------------------------------------------

parse_str — Разбирает строку в переменные Example/ parse_str($"My Value=Something", $output); echo $output['My_Value']; // Something
-------------------------------------------------------------------------------------------------


data - Записываемые данные. Может быть типа string, array или ресурсом stream.

flags 
-----------------------------------------
FILE_USE_INCLUDE_PATH	Ищет filename в подключаемых директориях. Подробнее смотрите директиву include_path.

FILE_APPEND	        Если файл filename уже существует, данные будут дописаны в конец файла вместо того,
                        чтобы его перезаписать.

LOCK_EX	                Получить эксклюзивную блокировку на файл на время записи. Другими словами,
                        между вызовами fopen() и fwrite() произойдет вызов функции flock(). Это не одно и то же,
                        что вызов fopen() с флагом X.


-------------------------------------------------------------------------------------------------



array_key_exists — Проверяет, присутствует ли в массиве указанный ключ или индекс
-------------------------------------------------------------------------------------------------
$search_array = array('first' => 1, 'second' => 4);
array_key_exists('first', $search_array);


iconv_strlen — Возвращает количество символов в строке
-------------------------------------------------------------------------------------------------

call_user_func_array() — Вызывает пользовательскую функцию с массивом параметров
-------------------------------------------------------------------------------------------------

ksort() — Сортирует массив по ключам
-------------------------------------------------------------------------------------------------

func_get_args() — Возвращает массив, содержащий аргументы функции
-------------------------------------------------------------------------------------------------

func_num_args() — Возвращает количество аргументов, переданных функции
-------------------------------------------------------------------------------------------------

in_array — Проверяет, присутствует ли в массиве значение
-------------------------------------------------------------------------------------------------


array_merge() - Сливает один или большее количество массивов
-------------------------------------------------------------------------------------------------
$array1 = array("color" => "red", 2, 4);
$array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
$result = array_merge($array1, $array2);
print_r($result);
-------------------------------------------------------------------------------------------------



implode — Объединяет элементы массива в строку
-------------------------------------------------------------------------------------------------
$array = array('имя', 'почта', 'телефон');

implode('hello', array()));



key() - возвращает индекс текущего элемента массива.
-------------------------------------------------------------------------------------------------


array_flip — Меняет местами ключи с их значениями в массиве
-------------------------------------------------------------------------------------------------


array_diff — Вычислить расхождение массивов
-------------------------------------------------------------------------------------------------
Сравнивает array1 с одним или несколькими другими массивами и возвращает значения из array1,
которые отсутствуют во всех других массивах.


array_diff_key — Вычисляет расхождение массивов, сравнивая ключи
-------------------------------------------------------------------------------------------------


current() - Возвращает текущий элемент массива
-------------------------------------------------------------------------------------------------


array_values — Выбирает все значения массива
-------------------------------------------------------------------------------------------------


file_exists() — Проверяет наличие указанного файла или каталога
-------------------------------------------------------------------------------------------------


filter_input() — Принимает переменную извне PHP и, при необходимости, фильтрует ее
-------------------------------------------------------------------------------------------------


var_dump() — Выводит информацию о переменной
-------------------------------------------------------------------------------------------------


die — Эквивалент функции exit
-------------------------------------------------------------------------------------------------


strtolower — Преобразует строку в нижний регистр
-------------------------------------------------------------------------------------------------


trim — Удаляет пробелы (или другие символы) из начала и конца строки
-------------------------------------------------------------------------------------------------


asort — Сортирует массив, сохраняя ключи
-------------------------------------------------------------------------------------------------


array_push — Добавляет один или несколько элементов в конец массива
-------------------------------------------------------------------------------------------------


count — Подсчитывает количество элементов массива или что-то в объекте
-------------------------------------------------------------------------------------------------


$food = array('fruits' => array('orange', 'banana', 'apple'),
              'veggie' => array('carrot', 'collard', 'pea'));

// рекурсивный count
echo count($food, COUNT_RECURSIVE); // выводит 8

// обычный count
echo count($food); // выводит 2


-------------------------------------------------------------------------------------------------

array_search — Осуществляет поиск данного значения в массиве и возвращает ключ первого найденного элемента в случае удачи
-------------------------------------------------------------------------------------------------

date_default_timezone_set('Europe/London') - установка временной зон
-------------------------------------------------------------------------------------------------

date_default_timezone_get() - вывод текущей зоны по дефолту
-------------------------------------------------------------------------------------------------

mkdir — Создаёт директорию
-------------------------------------------------------------------------------------------------

Передать PHP-код напрямую в командной строке. $ php -r 'print_r(get_defined_constants());'
-------------------------------------------------------------------------------------------------

json_decode()
-------------------------------------------------------------------------------------------------
Принимает кодированную строку JSON и преобразует ее в фактическое значение PHP,
но эта функция работает только с закодированными строками UTF-8.
Json_decode () преобразует преобразованное значение в соответствующие типы PHP.
Если преобразование невозможно, оно возвращает значение NULL.

json_decode() — Декодирует JSON строку

-------------------------------------------------------------------------------------------------

array_slice — Выбирает срез массива
-------------------------------------------------------------------------------------------------
<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // возвращает "c", "d", и "e"
$output = array_slice($input, -2, 1);  // возвращает "d"
$output = array_slice($input, 0, 3);   // возвращает "a", "b", и "c"
-------------------------------------------------------------------------------------------------

list — Присваивает переменным из списка значения подобно массиву
-------------------------------------------------------------------------------------------------
Подобно array(), это не функция, а языковая конструкция. list() используется для того,
чтобы присвоить списку переменных значения за одну операцию.


usort — Сортирует массив по значениям используя пользовательскую функцию для сравнения элементов
-------------------------------------------------------------------------------------------------

substr — Возвращает подстроку. Exampel.. $rest = substr("abcdef", -2);    // возвращает "ef"
-------------------------------------------------------------------------------------------------

explode — Разбивает строку с помощью разделителя Exampel.. explode("/", $_GET["list"]);
-------------------------------------------------------------------------------------------------

str_replace() - находит значение и заменяет его на другое
-------------------------------------------------------------------------------------------------
// присваивает: You should eat pizza, beer, and ice cream every day
$phrase  = "You should eat fruits, vegetables, and fiber every day.";
$healthy = array("fruits", "vegetables", "fiber");
$yummy   = array("pizza", "beer", "ice cream");

$newphrase = str_replace($healthy, $yummy, $phrase);
-------------------------------------------------------------------------------------------------

file_get_contents — Читает содержимое файла в строку
-------------------------------------------------------------------------------------------------

$file = file_get_contents('./people.txt', true);
// > PHP 5
$file = file_get_contents('./people.txt', FILE_USE_INCLUDE_PATH);

-------------------------------------------------------------------------------------------------

Символические ссылки
-------------------------------------------------------------------------------------------------

В системах Unix иногда возникает необходимость иметь для файла или каталога разные имена.
При этом одно из имен логично назвать основным, а все другие - его псевдонимами.
В терминологии Unix такие всевдонимы называются символическими ссылками.

Символическая ссылка - это просто бинарный файл специального вида, который содержит ссылку на основной файл.
При обращении к такому файлу (например, открытию его на чтение) система оределяет,
к какому объекту на самом деле запрашивается доступ, и его обеспечивает. Это означает,
что мы можем использовать символические ссылки точно так же, как и обычные файлы.

В PHP есть две встроенные функции, позволяющие создавать жесткие и символические ссылки.
Они принимают одни и те же строковые параметры и возвращают аналогичные результаты.
Функция symlink() создает символическую ссылку. В первом параметре ей необходимо передать имя целевого файла,
а во втором — место расположения ссылки. Функция вернет логическое значение true в случае успешного завершения,
и false, если произошла ошибка. 

symlink — Создаёт символическую ссылку
-------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------


Описание

mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )

type
Один из INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER или INPUT_ENV.


filter
Идентификатор (ID) применяемого фильтра. На странице Типы фильтров приведен список доступных фильтров.

Если не указан, то используется FILTER_DEFAULT, который равнозначен FILTER_UNSAFE_RAW. Это значит, что по умолчанию не применяется никакого фильтра.

Значение запрашиваемой переменной в случае успеха, FALSE, если фильтрация завершилась неудачей,
или NULL, если переменная variable_name не определена. Если установлен флаг FILTER_NULL_ON_FAILURE,
функция возвращает FALSE, если переменная не определена и NULL, если фильтрация завершилась неудачей.


array_map — Применяет callback-функцию ко всем элементам указанных массивов
-------------------------------------------------------------------------------------------------
            

В данном примере каждый эллемент из массива $a обробатываеться ф-цией "cube".

<?php
function cube($n)
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
print_r($b);
?>


filter_input_array — Принимает несколько переменных извне PHP и, при необходимости, фильтрует их
-------------------------------------------------------------------------------------------------

filter_input_array ( int $type [, mixed $definition [, bool $add_empty = true ]] )

type
Один из INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER или INPUT_ENV.

definition
Массив, определяющий аргументы. Допустимый ключ - строка string, содержащая имя переменной,
и допустимое значение - или тип filter, или массив array, при необходимости определяющий фильтр,
флаги и параметры. Если значение является массивом, допустимыми ключами являются filter,
который определяет (тип фильтра ), flags, который определяет любые флаги, применяемые к фильтру и options,
который определяет любые параметры, применяемые к фильтру. См. пример ниже для лучшего понимания.

Этот параметр также может быть целым числом, содержащим предопределенную фильтровую константу.
Затем все значения во входном массиве фильтруются этим фильтром.

add_empty
Добавляет в результат отсутствующие ключи со значением NULL.




-------------------------------------------------------------------------------------------------

$handle = fopen("/home/rasmus/file.txt", "r");
$handle = fopen("/home/rasmus/file.gif", "wb");
$handle = fopen("http://www.example.com/", "r");
$handle = fopen("ftp://user:password@example.com/somefile.txt", "w");

-------------------------------------------------------------------------------------------------

fopen — Открывает файл или URL



-------------------------------------------------------------------------------------------------


Пространства имен
-------------------------------------------------------------------------------------------------

class Eddard
{

}

namespace Stark;

class Eddard
{

}

$eddard = new \Eddard();       - экземпляр класса вне пространства имен Stark, он находиться в глобальном пространстве имен
$eddard = new Stark\Eddard();  - экземпляр класса в пространстве имен Stark


Создание ярлыка
-------------------------------------------------
namespace Stark;

use Tully\Edmure; еще есть возможность создать псевдоним use Tully\Edmure as Tully;

// app/routes.php

$edmure = new Edmure();


-------------------------------------------------------------------------------------------------

Оператор разрешения области видимости (::)

A::foo() - пример вызова статического метода

<?php
class MyClass {
    const CONST_VALUE = 'Значение константы';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE; // Начиная с версии PHP 5.3.0

echo MyClass::CONST_VALUE;
?>

Вызов нестатического метода статическим способом из неподходящего контекста было объявлено устаревшив
в PHP 5.6.0. Начиная с PHP 7.0.0, подобный вызов объявлен совсем устаревшим (если только вызов не
                                                                             произошел из подходящего контекста). 
-------------------------------------------------------------------------------------------------


Магические методы
-------------------------------------------------------------------------------------------------

Имена методов __construct(),
               __destruct(),
                   __call(), 
             __callStatic(),
                    __get(),
                    __set(),
                  __isset(),
                  __unset(),
                  __sleep(),
                 __wakeup(),
               __toString(),
                 __invoke(),
              __set_state(),
                  __clone(),
              __debugInfo() 
              зарезервированы для "магических" методов в PHP.
              Не стоит называть свои методы этими именами, если вы не хотите использовать их "магическую" функциональность.

__construct() — метод конструктор, если он объявлен в классе то он будет вызываться при каждом создании объекта. Может принимать одно или несколько свойств.

__destruct() — деструктор вызывается при освобождении всех ссылок на объект в котором он находится или по завершению работы скрипта. Не может принимать свойства.

     __get() — будет выполнен при чтении данных из недоступных свойств.

     __set() — будет выполнен при записи данных в недоступные свойства.

   __isset() — будет выполнен при использовании isset() или empty() на недоступных свойствах.

   __unset() — будет выполнен при вызове unset() на недоступном свойстве.

__toString() — позволяет написать реакцию класса при возведении его в строку.

  __invoke() — вызывается когда скрипт выполняет объект как функцию.

   __clone() — клонирует объект.



sprintf — Возвращает отформатированную строку
-------------------------------------------------------------------------------------------------






Cross-Site Scripting — «межсайтовый скриптинг») — тип атаки на веб-системы,
                       заключающийся во внедрении в выдаваемую веб-системой страницу вредоносного кода
                       (который будет выполнен на компьютере пользователя при открытии им этой страницы)
                       и взаимодействии этого кода с веб-сервером злоумышленника.


                                  
-----------------***************************************************************-----------------


                                    Борьба с HTML и XSS иньекциями
-------------------------------------------------------------------------------------------------

strip_tags -- Удаляет HTML и PHP тэги из строки

htmlspecialchars — Преобразует специальные символы в HTML-сущности
    htmlspecialchars($_GET["search"]);

filter_var — Фильтрует переменную с помощью определенного фильтра


$conn = Ihub_Db::get()->getConn(Affiliate::$_table_name);
Ihub_Db::get()->escapeString($_GET["search"], $conn);

list($condition, $order_by) = EmployeeManager::createEmployeeFilter($get_data);

createEmployeeFilter


Два варианта экранирования
-------------------------------------------------------------------------------------------------
$order_by = Ihub_Db::get()->escapeString($data["orderby"] . " " . $data["asc_desc"], $conn);
$orderby = '"' .Ihub_Db::get()->escapeString( $_GET["orderby"] . " " . $_GET["asc_desc"] , $conn). '"';


-----------------***************************************************************-----------------
                                            Защита от CSRF
-------------------------------------------------------------------------------------------------
Код

Создание CSRF токен

session_start();
if (empty($_SESSION['token'])) {
    if (function_exists('mcrypt_create_iv')) {
        $_SESSION['token'] = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
    } else {
        $_SESSION['token'] = bin2hex(openssl_random_pseudo_bytes(32));
    }
}
$token = $_SESSION['token'];



Verifying the CSRF Token

Don't just use == or even ===, use hash_equals() (PHP 5.6+ only, but available to earlier versions with the hash-compat library).

if (!empty($_POST['token'])) {
    if (hash_equals($_SESSION['token'], $_POST['token'])) {
         // Proceed to process the form data
    } else {
         // Log this as a warning and keep an eye on these attempts
    }
}

https://www.youtube.com/watch?v=NEOUPldTaZ4
https://stackoverflow.com/questions/6287903/how-to-properly-add-csrf-token-using-php

-------------------------------------------------------------------------------------------------

Операторы сравнения
-------------------------------------------------------------------------------------------------

Пример	Название	Результат
$a == $b	Равно	TRUE если $a равно $b после преобразования типов.
$a === $b	Тождественно равно	TRUE если $a равно $b и имеет тот же тип.
$a != $b	Не равно	TRUE если $a не равно $b после преобразования типов.
$a <> $b	Не равно	TRUE если $a не равно $b после преобразования типов.
$a !== $b	Тождественно не равно	TRUE если $a не равно $b или они разных типов.
$a < $b	Меньше	TRUE если $a строго меньше $b.
$a > $b	Больше	TRUE если $a строго больше $b.
$a <= $b	Меньше или равно	TRUE если $a меньше или равно $b.
$a >= $b	Больше или равно	TRUE если $a больше или равно $b.
$a <=> $b	Спейсшип (космический корабль)	Число типа integer меньше, больше или равное нулю, когда $a соответственно меньше, больше или равно $b. Доступно PHP 7.


Наиболее важные функции для работы с переменными
-------------------------------------------------------------------------------------------------
Функция	                  Пояснения
-------------------------------------------------------------------------------------------------
empty($a)	        Возвращает true, если $a является пустой. Внимание, значение 0 также рассматривается как пустое!
isset($a)	        Возвращает true, если переменная $a существует, даже если она при этом является пустой
is_number($a)	        Возвращает true, если переменная $a имеет численное значение
is_int($a)	        Возвращает true, если переменная $a является целым числом
is_bool($a)	        Возвращает true, если переменная $a имеет логическое значение (true или false)
is_float($a)	        Возвращает true, если переменная $a является числом с плавающей запятой
gettype(Sa)	        Возвращает тип переменной $a, среди возможных вариантов: boolean, integer, double и string
settype($a, Type)	Устанавливает тип переменной $а. Например, команда $a="1 книга" создает переменную строкового типа (string).
                        После выполнения команды settype ($a, " integer") переменная $a будет иметь целочисленный тип (integer)
                        и теперь содержит значение 1. Для типа, кроме прочих других, могут использоваться следующие значения:
                                                                                        boolean (начиная с PHP 4.2.0 - bool),
                                                                                        integer (начиная с PHP 4.2.0 - int),
                                                                                        double (начиная с PHP 4.2.0 - float) и 
                                                                                        string

-------------------------------------------------------------------------------------------------
is_array — Определяет, является ли переменная массивом



-------------------------------------------------------------------------------------------------
*********************************************  ООП  *********************************************
-------------------------------------------------------------------------------------------------

Классы
-------------------------------------------------------------------
Класс - это каркас для объекта. Это кусок кода, который определяет:
Типы данных, которые будут содержать созданные объекты класса
Функции, которые будут содержать эти объекты.
-------------------------------------------------------------------

Переменные класса
-------------------------------------------------------------------
Значения данных, которые хранятся в том или ином объекте, 
записываются в специальные переменные, называемые переменными класса.
Переменные класса тесно связаны с его объектом. Несмотря на то что
все объекты класса имеют одни и те же переменные,
их значения могут отличаться.
-------------------------------------------------------------------

Методы
-------------------------------------------------------------------
Функции, определяемые в классе и применяемые для объектов 
этого класса, называются методами. Они не во многом отличаются от 
обычных функций - вы можете передавать им значения,
они могут содержать локальные переменные и возвращать значения.
Однако, методы чаще работают с переменными объекта.
-------------------------------------------------------------------

core::getInfo()  - вызов метода из класса
$core->getInfo() - вызов метода из объекта его класса




Создать класс в PHP
-------------------------------------------------------------------

class ClassName
{
  // (определение класса)
}

-------------------------------------------------------------------

Создавать объекты в PHP
-------------------------------------------------------------------

new ClassName()
$member = new Member();

-------------------------------------------------------------------






get_class()     — Возвращает имя класса, к которому принадлежит объект
method_exists() — Проверяет, существует ли метод в данном классе


class MyClass
{
    // Объявление общедоступного конструктора
    public function __construct() { }

    // Объявление общедоступного метода
    public function MyPublic() { }

    // Объявление защищенного метода
    protected function MyProtected() { }

    // Объявление закрытого метода
    private function MyPrivate() { }

    // Это общедоступный метод
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

parent::метод_родительского_класа
--------------------------------------------------

К public (общедоступным) - свойствам и методам, можно получить доступ из любого контекста.
К protected (защищенным) - свойствам и методам можно получить доступ либо из содержащего их класса,
                           либо из его подкласса. Никакому внешнему коду доступ к ним не предоставляется.

Вы можете сделать данные класса недоступными для вызывающей программы с помощью ключевого слова 
private (закрытые). К таким свойствам и методам можно получить доступ только из того класса,
                    в котором они объявлены. Даже подклассы данного класса не имеют доступа к таким данным.

__construct() - конструктор (магический метод)
--------------------------------------------------
Классы, в которых объявлен метод-конструктор, будут вызывать этот метод при каждом создании нового объекта

Замечание: Конструкторы, определенные в классах-родителях не вызываются автоматически,
если класс-потомок определяет собственный конструктор. Чтобы вызвать конструктор,
объявленный в родительском классе, следует обратиться к методу parent::__construct()
внутри конструктора класса-потомка. Если в классе-потомке не определен конструктор,
то он может наследоваться от родительского класса как обычный метод (если он не определен как приватный).

__destruct() - Деструкторы
--------------------------------------------------
Деструктор будет вызван при освобождении всех ссылок на определенный объект или при завершении скрипта
                                                                    (порядок выполнения деструкторов
                                                                     не гарантируется).

Деструктор будет вызван даже в том случае, если скрипт был остановлен с помощью функции exit().
Вызов exit() в деструкторе предотвратит запуск всех последующих функций завершения.

Замечание:
Попытка бросить исключение в деструкторе (вызванного во время завершения скрипта) влечет за собой фатальную ошибку.





--------------------------------------------------
Exception — это базовый класс для всех исключений в PHP 5, и для всех пользовательских исключений в PHP 7.


Injection Dependency
--------------------------------------------------

Injection Dependency - это шаблон проектирования, который помогает избежать зависимостей жесткого кодирования
для некоторых частей кода или программного обеспечения

Существует 3-и способа Injecting Dependencies

Constructor Injection
Setter Injection (use set function)
Interface Injection





AJAX
------------------------------------------------------------------------------------------------------------------------------------------------------
AJAX (аббревиатура от «Asynchronous Javascript And Xml») – технология обращения к серверу без перезагрузки страницы.




    private function setBuckets($items)
    {
        foreach ($items as &$item) {
            // TODO: must be optimized
            $bucket = self::getBucket($item['id']);
            $item['bucket_name'] = ($bucket && !empty($bucket)) ? $bucket->data['name'] : "-";
        }
        return $items;
    }


, ['selected' => $selected_employee_type_id]








